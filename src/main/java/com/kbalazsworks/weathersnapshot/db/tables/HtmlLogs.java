/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.weathersnapshot.db.tables;


import com.kbalazsworks.weathersnapshot.db.Keys;
import com.kbalazsworks.weathersnapshot.db.Public;
import com.kbalazsworks.weathersnapshot.db.tables.records.HtmlLogsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HtmlLogs extends TableImpl<HtmlLogsRecord> {

    private static final long serialVersionUID = -1109708654;

    /**
     * The reference instance of <code>public.html_logs</code>
     */
    public static final HtmlLogs HTML_LOGS = new HtmlLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HtmlLogsRecord> getRecordType() {
        return HtmlLogsRecord.class;
    }

    /**
     * The column <code>public.html_logs.id</code>.
     */
    public final TableField<HtmlLogsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('html_logs_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.html_logs.site_id</code>.
     */
    public final TableField<HtmlLogsRecord, Integer> SITE_ID = createField(DSL.name("site_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.html_logs.site_uri_id</code>.
     */
    public final TableField<HtmlLogsRecord, Integer> SITE_URI_ID = createField(DSL.name("site_uri_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.html_logs.parser_version_id</code>.
     */
    public final TableField<HtmlLogsRecord, Integer> PARSER_VERSION_ID = createField(DSL.name("parser_version_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.html_logs.html</code>.
     */
    public final TableField<HtmlLogsRecord, String> HTML = createField(DSL.name("html"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.html_logs.created_at</code>.
     */
    public final TableField<HtmlLogsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.html_logs.parsed</code>.
     */
    public final TableField<HtmlLogsRecord, LocalDateTime> PARSED = createField(DSL.name("parsed"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.html_logs</code> table reference
     */
    public HtmlLogs() {
        this(DSL.name("html_logs"), null);
    }

    /**
     * Create an aliased <code>public.html_logs</code> table reference
     */
    public HtmlLogs(String alias) {
        this(DSL.name(alias), HTML_LOGS);
    }

    /**
     * Create an aliased <code>public.html_logs</code> table reference
     */
    public HtmlLogs(Name alias) {
        this(alias, HTML_LOGS);
    }

    private HtmlLogs(Name alias, Table<HtmlLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private HtmlLogs(Name alias, Table<HtmlLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> HtmlLogs(Table<O> child, ForeignKey<O, HtmlLogsRecord> key) {
        super(child, key, HTML_LOGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<HtmlLogsRecord, Long> getIdentity() {
        return Keys.IDENTITY_HTML_LOGS;
    }

    @Override
    public UniqueKey<HtmlLogsRecord> getPrimaryKey() {
        return Keys.HTML_LOGS_PKEY;
    }

    @Override
    public List<UniqueKey<HtmlLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<HtmlLogsRecord>>asList(Keys.HTML_LOGS_PKEY);
    }

    @Override
    public HtmlLogs as(String alias) {
        return new HtmlLogs(DSL.name(alias), this);
    }

    @Override
    public HtmlLogs as(Name alias) {
        return new HtmlLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HtmlLogs rename(String name) {
        return new HtmlLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HtmlLogs rename(Name name) {
        return new HtmlLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, Integer, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
