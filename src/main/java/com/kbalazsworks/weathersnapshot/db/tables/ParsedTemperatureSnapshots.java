/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.weathersnapshot.db.tables;


import com.kbalazsworks.weathersnapshot.db.Keys;
import com.kbalazsworks.weathersnapshot.db.Public;
import com.kbalazsworks.weathersnapshot.db.tables.records.ParsedTemperatureSnapshotsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParsedTemperatureSnapshots extends TableImpl<ParsedTemperatureSnapshotsRecord> {

    private static final long serialVersionUID = -2083499096;

    /**
     * The reference instance of <code>public.parsed_temperature_snapshots</code>
     */
    public static final ParsedTemperatureSnapshots PARSED_TEMPERATURE_SNAPSHOTS = new ParsedTemperatureSnapshots();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParsedTemperatureSnapshotsRecord> getRecordType() {
        return ParsedTemperatureSnapshotsRecord.class;
    }

    /**
     * The column <code>public.parsed_temperature_snapshots.id</code>.
     */
    public final TableField<ParsedTemperatureSnapshotsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('parsed_temperature_snapshots_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.parsed_temperature_snapshots.html_logs_id</code>.
     */
    public final TableField<ParsedTemperatureSnapshotsRecord, Long> HTML_LOGS_ID = createField(DSL.name("html_logs_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.parsed_temperature_snapshots.temperature_time</code>.
     */
    public final TableField<ParsedTemperatureSnapshotsRecord, LocalDateTime> TEMPERATURE_TIME = createField(DSL.name("temperature_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.parsed_temperature_snapshots.temperature_min</code>.
     */
    public final TableField<ParsedTemperatureSnapshotsRecord, Integer> TEMPERATURE_MIN = createField(DSL.name("temperature_min"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.parsed_temperature_snapshots.temperature_max</code>.
     */
    public final TableField<ParsedTemperatureSnapshotsRecord, Integer> TEMPERATURE_MAX = createField(DSL.name("temperature_max"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.parsed_temperature_snapshots</code> table reference
     */
    public ParsedTemperatureSnapshots() {
        this(DSL.name("parsed_temperature_snapshots"), null);
    }

    /**
     * Create an aliased <code>public.parsed_temperature_snapshots</code> table reference
     */
    public ParsedTemperatureSnapshots(String alias) {
        this(DSL.name(alias), PARSED_TEMPERATURE_SNAPSHOTS);
    }

    /**
     * Create an aliased <code>public.parsed_temperature_snapshots</code> table reference
     */
    public ParsedTemperatureSnapshots(Name alias) {
        this(alias, PARSED_TEMPERATURE_SNAPSHOTS);
    }

    private ParsedTemperatureSnapshots(Name alias, Table<ParsedTemperatureSnapshotsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParsedTemperatureSnapshots(Name alias, Table<ParsedTemperatureSnapshotsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ParsedTemperatureSnapshots(Table<O> child, ForeignKey<O, ParsedTemperatureSnapshotsRecord> key) {
        super(child, key, PARSED_TEMPERATURE_SNAPSHOTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ParsedTemperatureSnapshotsRecord, Long> getIdentity() {
        return Keys.IDENTITY_PARSED_TEMPERATURE_SNAPSHOTS;
    }

    @Override
    public UniqueKey<ParsedTemperatureSnapshotsRecord> getPrimaryKey() {
        return Keys.PARSED_TEMPERATURE_SNAPSHOTS_PKEY;
    }

    @Override
    public List<UniqueKey<ParsedTemperatureSnapshotsRecord>> getKeys() {
        return Arrays.<UniqueKey<ParsedTemperatureSnapshotsRecord>>asList(Keys.PARSED_TEMPERATURE_SNAPSHOTS_PKEY);
    }

    @Override
    public ParsedTemperatureSnapshots as(String alias) {
        return new ParsedTemperatureSnapshots(DSL.name(alias), this);
    }

    @Override
    public ParsedTemperatureSnapshots as(Name alias) {
        return new ParsedTemperatureSnapshots(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParsedTemperatureSnapshots rename(String name) {
        return new ParsedTemperatureSnapshots(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParsedTemperatureSnapshots rename(Name name) {
        return new ParsedTemperatureSnapshots(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
