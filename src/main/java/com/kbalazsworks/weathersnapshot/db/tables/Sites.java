/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.weathersnapshot.db.tables;


import com.kbalazsworks.weathersnapshot.db.Keys;
import com.kbalazsworks.weathersnapshot.db.Public;
import com.kbalazsworks.weathersnapshot.db.tables.records.SitesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sites extends TableImpl<SitesRecord> {

    private static final long serialVersionUID = 1022394602;

    /**
     * The reference instance of <code>public.sites</code>
     */
    public static final Sites SITES = new Sites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SitesRecord> getRecordType() {
        return SitesRecord.class;
    }

    /**
     * The column <code>public.sites.id</code>.
     */
    public final TableField<SitesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('sites_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.sites.name</code>.
     */
    public final TableField<SitesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.sites.domain</code>.
     */
    public final TableField<SitesRecord, String> DOMAIN = createField(DSL.name("domain"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>public.sites</code> table reference
     */
    public Sites() {
        this(DSL.name("sites"), null);
    }

    /**
     * Create an aliased <code>public.sites</code> table reference
     */
    public Sites(String alias) {
        this(DSL.name(alias), SITES);
    }

    /**
     * Create an aliased <code>public.sites</code> table reference
     */
    public Sites(Name alias) {
        this(alias, SITES);
    }

    private Sites(Name alias, Table<SitesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sites(Name alias, Table<SitesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Sites(Table<O> child, ForeignKey<O, SitesRecord> key) {
        super(child, key, SITES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SitesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SITES;
    }

    @Override
    public UniqueKey<SitesRecord> getPrimaryKey() {
        return Keys.SITES_PKEY;
    }

    @Override
    public List<UniqueKey<SitesRecord>> getKeys() {
        return Arrays.<UniqueKey<SitesRecord>>asList(Keys.SITES_PKEY);
    }

    @Override
    public Sites as(String alias) {
        return new Sites(DSL.name(alias), this);
    }

    @Override
    public Sites as(Name alias) {
        return new Sites(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sites rename(String name) {
        return new Sites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sites rename(Name name) {
        return new Sites(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
